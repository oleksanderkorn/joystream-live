{"version":3,"sources":["debug.ts","joyApi.ts","utils.ts","get-status.ts","BootstrapButton.tsx","LinearProgressWithLabel.tsx","ValidatorsStats.tsx","LiveStatsWS.tsx","reportWebVitals.ts","ValidatorReport.tsx","joystream.svg","index.tsx"],"names":["moment","defaultFormat","config","JoyApi","endpoint","isReady","api","wsEndpoint","process","this","a","ApiPromise","provider","WsProvider","types","isReadyOrError","then","instance","blockHash","undefined","query","balances","totalIssuance","at","issuance","toNumber","Promise","all","rpc","system","chain","name","version","nodeName","nodeVersion","toString","getFinalizedHead","finalizedHash","getHeader","number","address","blockStart","stash","getBlockHash","startHash","staking","activeEra","startEra","unwrap","index","Date","timestamp","now","startTimestamp","toISOString","erasRewardPoints","eraPoints","data","individual","forEach","points","author","pn","Number","toBigInt","id","era","hash","block","date","searchPreviousBlocks","getBlock","currentBlockNr","header","currentHash","snapshotValidators","allValidators","isEmpty","validatorCount","max","activeValidators","Array","from","slice","session","validators","currentEra","isSome","erasTotalStake","BN","totalStake","count","length","toJSON","total_stake","PromiseAllObj","obj","Object","entries","map","key","val","res","reduce","acc","value","getChainState","init","finalizedBlockHeight","validatorsData","systemData","status","getValidatorStatistics","getActiveErasForBlock","BootstrapButton","withStyles","root","boxShadow","textTransform","fontSize","padding","border","lineHeight","color","backgroundColor","borderColor","fontFamily","join","Button","normalise","min","LinearProgressWithLabel","props","style","width","Box","display","alignItems","mr","LinearProgress","variant","minWidth","whiteSpace","Typography","Math","round","useStyles","makeStyles","textAlign","title","pos","marginBottom","marginTop","ValidatorsStats","classes","sortedByBlock","activeEras","firstBlock","lastBlock","scoringPeriodText","sort","e1","e2","toLocaleDateString","Card","className","CardContent","gutterBottom","split","i","CardActions","onClick","navigator","clipboard","writeText","size","LiveStatsWS","useState","shouldStop","setShouldStop","searchOptimized","setSearchOptimized","setActiveEras","field","headerName","sortable","columns","setStash","startBlock","setStartBlock","endBlock","setEndBlock","isLoading","setIsLoading","setLastBlock","progress","setProgress","setActiveValidators","useEffect","updateChainState","interval","setInterval","clearInterval","chainState","nextBlockHeight","currentBlock","isValidInCurrentEra","fetchBlocksData","resetDataBeforeLoading","blockHeight","shouldStopLoading","prev","resetProgress","fetchBlockData","stopFetchingBlocksData","updateProgress","result","isActiveBlock","indexOf","prevEras","stopLoadingOnLastBlock","shouldDisableButton","endBlockLabel","Container","maxWidth","Grid","container","spacing","item","xs","lg","Autocomplete","fullWidth","freeSolo","options","onChange","e","renderInput","params","TextField","label","type","target","FormControlLabel","control","Switch","checked","event","disabled","minHeight","height","rows","pageSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createStyles","flexGrow","ValidatorReportCard","setScoringPeriodText","updateScoringPeriodText","report","scoringDateFormat","startTime","format","endTime","endEra","totalBlocks","ValidatorReport","dateFormat","backendUrl","setBackendUrl","subtract","dateFrom","setDateFrom","dateTo","setDateTo","isModalOpen","setIsModalOpen","error","setError","currentPage","setCurrentPage","filterTab","setFilterTab","valueFormatter","isNaN","toFixed","totalCount","setReport","loadReport","page","blockParam","dateParam","apiUrl","axios","get","response","catch","err","justifyContent","alignSelf","Dialog","onClose","aria-labelledby","open","DialogTitle","FormControl","margin","Select","labelId","MenuItem","Tabs","indicatorColor","newValue","aria-label","Tab","hidden","InputLabelProps","shrink","CircularProgress","marginLeft","getButtonTitle","Alert","severity","rowCount","paginationMode","onPageChange","rowsPerPageOptions","disableSelectionOnClick","ReactDOM","render","StrictMode","AppBar","position","flexDirection","Toolbar","paddingLeft","component","RouterLink","to","src","joystream","alt","path","document","getElementById"],"mappings":"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","file":"static/js/main.2af63cdf.chunk.js","sourcesContent":["import moment from 'moment';\n\nmoment.defaultFormat = 'YYYY-MM-DD HH:mm:ss';\n\nexport const log = (...values: any[]) => {\n    // console.log(`[${moment().format()}]:`, ...values);\n}\n\nexport const error = (...values: any[]) => {\n    console.error(`[${moment().format()}]:`, ...values);\n}","import { WsProvider, ApiPromise } from \"@polkadot/api\";\nimport { types } from \"@joystream/types\";\nimport { AccountId, Hash } from \"@polkadot/types/interfaces\";\nimport { config } from \"dotenv\";\nimport BN from \"bn.js\";\nimport { Option, Vec } from \"@polkadot/types\";\nimport { log } from \"./debug\"\nimport { ActiveEra } from \"./Types\";\n\nconfig();\n\nexport class JoyApi {\n  endpoint: string;\n  isReady: Promise<ApiPromise>;\n  api!: ApiPromise;\n\n  constructor(endpoint?: string) {\n    const wsEndpoint = endpoint || process.env.REACT_APP_WS_PROVIDER || \"ws://127.0.0.1:9944\";\n    this.endpoint = wsEndpoint;\n    this.isReady = (async () => {\n      const api = await new ApiPromise({ provider: new WsProvider(wsEndpoint), types })\n        .isReadyOrError;\n      return api;\n    })();\n  }\n  get init(): Promise<JoyApi> {\n    return this.isReady.then((instance) => {\n      this.api = instance;\n      return this;\n    });\n  }\n\n  async totalIssuance(blockHash?: Hash) {\n    const issuance =\n      blockHash === undefined\n        ? await this.api.query.balances.totalIssuance()\n        : await this.api.query.balances.totalIssuance.at(blockHash);\n\n    return issuance.toNumber();\n  }\n\n  async systemData() {\n    const [chain, nodeName, nodeVersion] = await Promise.all([\n      this.api.rpc.system.chain(),\n      this.api.rpc.system.name(),\n      this.api.rpc.system.version(),\n      // this.api.rpc.system.peers(),\n    ]);\n\n    return {\n      chain: chain.toString(),\n      nodeName: nodeName.toString(),\n      nodeVersion: nodeVersion.toString(),\n      // peerCount: peers.length,\n    };\n  }\n\n  async finalizedHash() {\n    return this.api.rpc.chain.getFinalizedHead();\n  }\n\n  async finalizedBlockHeight() {\n    const finalizedHash = await this.finalizedHash();\n    const { number } = await this.api.rpc.chain.getHeader(`${finalizedHash}`);\n    return number.toNumber();\n  }\n\n  async getActiveErasForBlock(address: string, blockStart: number): Promise<ActiveEra[] | undefined> {\n    const stash = address;\n    const startHash = (await this.api.rpc.chain.getBlockHash(blockStart));\n    const startEra = (await this.api.query.staking.activeEra.at(startHash)).unwrap().index.toNumber();\n    const startTimestamp = new Date((await this.api.query.timestamp.now.at(startHash)).toNumber()).toISOString();\n    const eraPoints = await this.api.query.staking.erasRewardPoints.at(startHash, startEra)\n    let data = undefined\n    eraPoints.individual.forEach((points, author) => {\n      log(`Author Points [${author}]`);\n      log(`Individual Points [${points}]`);\n      if (author.toString() === stash) {\n        const pn = Number(points.toBigInt())\n        const activeEra: ActiveEra = {\n          id: blockStart,\n          era: startEra,\n          hash: startHash.toString(),\n          block: blockStart,\n          date: startTimestamp,\n          points: pn\n        }\n        log(`Era [${activeEra.era}], Block [${activeEra.block}], Date [${activeEra.date}], Points [${activeEra.points}], Hash [${activeEra.hash}]`);\n        data = activeEra\n      }\n    });\n    return data\n  }\n\n  async findActiveValidators(hash: Hash, searchPreviousBlocks: boolean): Promise<AccountId[]> {\n    const block = await this.api.rpc.chain.getBlock(hash);\n\n    let currentBlockNr = block.block.header.number.toNumber();\n    let activeValidators;\n    do {\n      let currentHash = (await this.api.rpc.chain.getBlockHash(currentBlockNr)) as Hash;\n      let allValidators = await this.api.query.staking.snapshotValidators.at(currentHash) as Option<Vec<AccountId>>;\n      if (!allValidators.isEmpty) {\n        let max = (await this.api.query.staking.validatorCount.at(currentHash)).toNumber();\n        activeValidators = Array.from(allValidators.unwrap()).slice(0, max);\n      }\n\n      if (searchPreviousBlocks) {\n        --currentBlockNr;\n      } else {\n        ++currentBlockNr;\n      }\n\n    } while (activeValidators === undefined);\n    return activeValidators;\n  }\n\n  async validatorsData() {\n    const validators = await this.api.query.session.validators();\n    const era = await this.api.query.staking.currentEra();\n    const totalStake = era.isSome ?\n      await this.api.query.staking.erasTotalStake(era.unwrap())\n      : new BN(0);\n\n    return {\n      count: validators.length,\n      validators: validators.toJSON(),\n      total_stake: totalStake.toNumber(),\n    };\n  }\n}\n","const fromEntries = (xs: [string | number | symbol, any][]) =>\n  xs.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n\nexport function PromiseAllObj(obj: {\n  [k: string]: any;\n}): Promise<{ [k: string]: any }> {\n  return Promise.all(\n    Object.entries(obj).map(([key, val]) =>\n      val instanceof Promise\n        ? val.then((res) => [key, res])\n        : new Promise((res) => res([key, val]))\n    )\n  ).then((res: any[]) => fromEntries(res));\n}\n","import { log } from \"./debug\";\nimport { JoyApi } from \"./joyApi\";\nimport { EraStatus } from \"./Types\";\nimport { PromiseAllObj } from \"./utils\";\n\nconst api = new JoyApi();\n\nexport async function getChainState() {\n  await api.init;\n\n  const status = await PromiseAllObj({\n    totalIssuance: await api.totalIssuance(),\n    finalizedBlockHeight: await api.finalizedBlockHeight(),\n    validators: await api.validatorsData(),\n    system: await api.systemData(),\n  });\n\n  log(status)\n  return status;\n}\n\nexport async function getValidatorStatistics(address: string, blockStart: number): Promise<EraStatus> {\n  await api.init;\n  const status = await PromiseAllObj({\n    status: await api.getActiveErasForBlock(address, blockStart)\n  })\n  return status as unknown as EraStatus\n}\n","import { Button, withStyles } from '@material-ui/core';\n\nexport const BootstrapButton = withStyles({\n  root: {\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 16,\n    padding: '6px 12px',\n    border: '1px solid',\n    lineHeight: 1.5,\n    color: '#ffffff',\n    backgroundColor: '#4138ff',\n    borderColor: '#4138ff',\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:hover': {\n      backgroundColor: '#4138dd',\n      borderColor: '#4138dd',\n      boxShadow: 'none',\n    },\n    '&:active': {\n      boxShadow: 'none',\n      backgroundColor: '#4138ee',\n      borderColor: '#4138ee',\n    },\n    '&:focus': {\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n    },\n  },\n})(Button);\n","import { Box, LinearProgress, LinearProgressProps, Typography } from '@material-ui/core';\n\nexport function normalise(value: number, min: number, max: number) {\n  return (Number(value) - Number(min)) * 100 / (Number(max) - Number(min));\n}\n\nexport function LinearProgressWithLabel(props: LinearProgressProps & { value: number; min: number; max: number; }) {\n  return props.value > 0 ? (\n      <div style={{ width: '98%' }}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Box width=\"100%\" mr={1}>\n            <LinearProgress variant=\"determinate\" value={normalise(props.value, props.min, props.max)} />\n          </Box>\n          <Box minWidth={35} style={{ whiteSpace: \"nowrap\" }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {`${Math.round(normalise(props.value, props.min, props.max))}% (${props.value}/${props.max})`}\n            </Typography>\n          </Box>\n        </Box>\n      </div>\n  ) : null;\n}\n","import { Button, Card, CardActions, CardContent, makeStyles, Typography } from '@material-ui/core';\nimport { ActiveEra } from './Types';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '98%',\n    textAlign: 'left'\n  },\n  title: {\n    fontSize: 18,\n  },\n  pos: {\n    marginBottom: 12,\n    marginTop: 12,\n  },\n});\n\nexport const ValidatorsStats = (props: { stash: String, activeEras: ActiveEra[]; }) => {\n  const classes = useStyles();\n  let sortedByBlock = props.activeEras\n  let noDataLabel = 'No Data Available'\n  let firstBlock: ActiveEra | undefined = undefined\n  let lastBlock: ActiveEra | undefined = undefined\n  let scoringPeriodText = ''\n\n  const copyValidatorStatistics = () => navigator.clipboard.writeText(scoringPeriodText)\n\n  if(props.activeEras.length > 0) {\n    sortedByBlock = props.activeEras.sort((e1,e2) => e1.block - e2.block)\n    firstBlock = sortedByBlock[0];\n    lastBlock = sortedByBlock[sortedByBlock.length - 1];\n    scoringPeriodText = `Validator Date: ${new Date(firstBlock!.date).toLocaleDateString()}-${new Date(lastBlock!.date).toLocaleDateString()}\\nDescription: I was an active validator from era/block ${firstBlock!.era}/${firstBlock!.block} to era/block ${lastBlock!.era}/${lastBlock!.block}\\nwith stash account ${props.stash}. (I was active in all the eras in this range and found a total of ? blocks)`\n    return (\n        <Card className={classes.root}>\n          <CardContent>\n            <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\n              Scoring period text:\n            </Typography>\n            { scoringPeriodText.split('\\n').map((i, key) => <Typography key={key} className={classes.pos} color=\"textSecondary\">{i}</Typography>) }\n          </CardContent>\n          <CardActions>\n            <Button onClick={copyValidatorStatistics} size=\"small\">Copy to clipboard</Button>\n          </CardActions>\n        </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.root}>\n        <CardContent>\n        <Typography className={classes.pos} color=\"textSecondary\">\n            { noDataLabel }\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n};\n","import './App.css';\nimport { getValidatorStatistics, getChainState } from './get-status';\nimport { Container, FormControlLabel, Grid, Switch, TextField } from '@material-ui/core';\nimport { ColDef, DataGrid } from '@material-ui/data-grid';\nimport { BootstrapButton } from './BootstrapButton';\nimport { LinearProgressWithLabel } from './LinearProgressWithLabel';\nimport { ActiveEra } from './Types';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useEffect, useState } from 'react';\nimport { ValidatorsStats } from './ValidatorsStats';\n\nconst LiveStatsWS = () => {\n  const [shouldStop, setShouldStop] = useState(false);\n  const [searchOptimized, setSearchOptimized] = useState(true);\n  const [activeEras, setActiveEras] = useState([] as ActiveEra[]);\n  const [columns] = useState(\n    [\n      { field: 'era', headerName: 'Era', width: 100, sortable: true },\n      { field: 'block', headerName: 'Block', width: 100, sortable: true },\n      { field: 'date', headerName: 'Date', width: 200, sortable: true },\n      { field: 'points', headerName: 'Points', width: 100, sortable: true },\n      { field: 'hash', headerName: 'Block Hash', width: 500, sortable: false },\n    ]\n  );\n  const [stash, setStash] = useState('5EhDdcWm4TdqKp1ew1PqtSpoAELmjbZZLm5E34aFoVYkXdRW');\n  const [startBlock, setStartBlock] = useState(1274283);\n  const [endBlock, setEndBlock] = useState(1274383);\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastBlock, setLastBlock] = useState(0);\n  const [progress, setProgress] = useState({\n    value: 0,\n    min: 0,\n    max: 0\n  });\n  const [activeValidators, setActiveValidators] = useState([]);\n\n  useEffect(() => {\n    updateChainState()\n    const interval = setInterval(() => { updateChainState() }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateChainState = async () => {\n    const chainState = await getChainState();\n    setLastBlock(chainState.finalizedBlockHeight)\n    setActiveValidators(chainState.validators.validators)\n  }\n  const nextBlockHeight = (currentBlock: number, isValidInCurrentEra: boolean) => {\n    if (Number(startBlock) < Number(endBlock)) {\n      if (searchOptimized && isValidInCurrentEra) {\n        if ((currentBlock + 600) < Number(endBlock)) {\n          return currentBlock + 600\n        }\n        return Number(endBlock)\n      }\n      return searchOptimized ? currentBlock + 10 : currentBlock + 1;\n    } else {\n      if (searchOptimized && isValidInCurrentEra) {\n        if ((currentBlock - 600) < Number(endBlock)) {\n          return currentBlock - 600\n        }\n        return Number(endBlock)\n      }\n      return searchOptimized ? currentBlock - 10 : currentBlock - 1;\n    }\n  }\n\n  const startingBlockHeight = () => {\n    if (Number(startBlock) < Number(endBlock)) {\n      return searchOptimized ? (Number(startBlock) - 600 < 0) ? 0 : Number(startBlock) - 600 : Number(startBlock)\n    }\n    return searchOptimized ? Number(startBlock) + 600 : Number(startBlock)\n  }\n\n  const fetchBlocksData = async () => {\n    resetDataBeforeLoading();\n    let isValidInCurrentEra = false\n    for (let blockHeight = startingBlockHeight(); ; blockHeight = nextBlockHeight(blockHeight, isValidInCurrentEra)) {\n      let shouldStopLoading = false\n      setShouldStop(prev => {\n        shouldStopLoading = prev\n        return shouldStopLoading\n      })\n      if (shouldStopLoading) {\n        resetProgress();\n        break;\n      }\n      isValidInCurrentEra = await fetchBlockData(Number(blockHeight));\n      if (blockHeight === Number(endBlock)) {\n        stopFetchingBlocksData()\n      }\n    }\n  }\n\n  const stopFetchingBlocksData = () => {\n    if (!shouldStop) {\n      setShouldStop(true)\n      setIsLoading(false)\n    }\n  }\n\n  const resetProgress = () => {\n    setShouldStop(false)\n    setIsLoading(false)\n    setProgress({ value: 0, min: 0, max: 0 })\n  }\n\n  const fetchBlockData = async (blockHeight: number): Promise<boolean> => {\n    updateProgress(blockHeight);\n    let result = await getValidatorStatistics(stash, blockHeight);\n    const isActiveBlock = result && result.status && activeEras.indexOf(result.status) < 0;\n    if (isActiveBlock) {\n      setActiveEras((prevEras) => [...prevEras, result.status])\n    }\n    stopLoadingOnLastBlock(blockHeight);\n    return isActiveBlock\n  }\n\n  const stopLoadingOnLastBlock = (blockHeight: number) => {\n    if (blockHeight.toString() === endBlock.toString()) {\n      setIsLoading(false)\n    }\n  }\n\n  const updateProgress = (blockHeight: number) => {\n    setProgress({ value: blockHeight, min: (searchOptimized ? startBlock - 600 : startBlock), max: endBlock })\n  }\n\n  const resetDataBeforeLoading = () => {\n    setIsLoading(true)\n    setActiveEras([])\n  }\n\n  const shouldDisableButton = !stash || !startBlock || !endBlock;\n  const endBlockLabel = lastBlock > 0 ? `End Block (Last block: ${lastBlock})` : 'End Block';\n\n  const updateStartBlock = (e: { target: { value: unknown; }; }) => setStartBlock((e.target.value as unknown as number));\n  const updateEndblock = (e: { target: { value: unknown; }; }) => setEndBlock((e.target.value as unknown as number));\n  const startOrStopLoading = () => isLoading ? stopFetchingBlocksData() : fetchBlocksData();\n  const updateSearchOptimized = (event: React.ChangeEvent<HTMLInputElement>) => setSearchOptimized(event.target.checked);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid\n        container\n        spacing={2}\n      >\n        <Grid item xs={12} lg={12}>\n          <h1>Live Stats</h1>\n        </Grid>\n        <Grid item xs={12} lg={12}>\n          <Autocomplete\n            fullWidth\n            freeSolo\n            options={activeValidators}\n            onChange={(e, value) => setStash(value || '')}\n            value={stash}\n            renderInput={(params) => <TextField {...params} label=\"Validator stash address\" variant=\"filled\" />} />\n        </Grid>\n        <Grid item xs={4} lg={5}>\n          <TextField fullWidth type=\"number\" onChange={updateStartBlock} id=\"block-start\" label=\"Start Block\" value={startBlock} variant=\"filled\" />\n        </Grid>\n        <Grid item xs={4} lg={2}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={searchOptimized}\n                onChange={updateSearchOptimized}\n                name=\"searchOptimized\"\n                color=\"primary\"\n              />\n            }\n            disabled={isLoading}\n            label={searchOptimized ? \"Optimized search\" : \"Full search\"}\n          />\n        </Grid>\n        <Grid item xs={4} lg={5}>\n          <TextField fullWidth type=\"number\" onChange={updateEndblock} id=\"block-end\" label={endBlockLabel} value={endBlock} variant=\"filled\" />\n        </Grid>\n        <Grid item xs={12} lg={12}>\n          <BootstrapButton size='large' style={{ minHeight: 56 }} disabled={shouldDisableButton} fullWidth onClick={startOrStopLoading} color=\"primary\">{isLoading ? 'Stop loading' : 'Load data'}</BootstrapButton>\n        </Grid>\n        <Grid item xs={12} lg={12}>\n          <LinearProgressWithLabel {...progress} />\n        </Grid>\n        <Grid item xs={12} lg={12}>\n          <ValidatorsStats stash={stash} activeEras={activeEras} />\n        </Grid>\n        <Grid item xs={12} lg={12}>\n          <div style={{ height: 600 }}>\n            <DataGrid rows={activeEras} columns={columns as unknown as ColDef[]} pageSize={50} />\n          </div>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default LiveStatsWS","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport { getChainState } from './get-status';\nimport moment from 'moment'\nimport { Card, CardActions, CardContent, CircularProgress, Container, createStyles, FormControl, Grid, makeStyles, MenuItem, Select, Tab, TextField, Typography } from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Edit from '@material-ui/icons/Edit';\nimport { BootstrapButton } from './BootstrapButton';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios'\nimport { config } from \"dotenv\";\nimport { Report, Reports } from './Types';\nimport { ColDef, DataGrid, PageChangeParams, ValueFormatterParams } from '@material-ui/data-grid';\nimport Alert from '@material-ui/lab/Alert';\nimport Tabs from '@material-ui/core/Tabs';\n\nconfig();\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    }),\n);\n\n\nconst ValidatorReport = () => {\n    const dateFormat = 'yyyy-MM-DD';\n    const [backendUrl, setBackendUrl] = useState(process.env.REACT_APP_BACKEND_URL || \"http://localhost:3500\");\n    const [activeValidators, setActiveValidators] = useState([]);\n    const [lastBlock, setLastBlock] = useState(0);\n    const [stash, setStash] = useState('5EhDdcWm4TdqKp1ew1PqtSpoAELmjbZZLm5E34aFoVYkXdRW');\n    const [dateFrom, setDateFrom] = useState(moment().subtract(14, 'd').format(dateFormat));\n    const [dateTo, setDateTo] = useState(moment().format(dateFormat));\n    const [startBlock, setStartBlock] = useState('' as unknown as number);\n    const [endBlock, setEndBlock] = useState('' as unknown as number);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [error, setError] = useState(undefined);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [filterTab, setFilterTab] = useState(0 as number);\n    const [columns] = useState(\n        [\n            { field: 'id', headerName: 'Era', width: 150, sortable: true },\n            { field: 'stakeTotal', headerName: 'Total Stake', width: 150, sortable: true },\n            { field: 'stakeOwn', headerName: 'Own Stake', width: 150, sortable: true },\n            { field: 'points', headerName: 'Points', width: 150, sortable: true },\n            { field: 'rewards', headerName: 'Rewards', width: 150, sortable: true },\n            { field: 'commission', headerName: 'Commission', width: 150, sortable: true, valueFormatter: (params: ValueFormatterParams) => {\n                if (isNaN(params.value as unknown as number)) {\n                    return `${params.value}%`\n                }\n                return `${Number(params.value).toFixed(0)}%`\n            }},\n            { field: 'blocksCount', headerName: 'Blocks Produced', width: 150, sortable: true },\n        ]\n    );\n    const [report, setReport] = useState({\n        pageSize: 0,\n        totalCount: 0,\n        totalBlocks: 0,\n        startEra: -1,\n        endEra: -1,\n        startBlock: -1,\n        endBlock: -1,\n        startTime: -1,\n        endTime: -1,\n        report: [] as unknown as Report[]\n    } as unknown as Reports );\n\n    useEffect(() => {\n        updateChainState()\n        const interval = setInterval(() => { updateChainState() }, 10000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const updateChainState = () => {\n        getChainState().then((chainState) => {\n            setLastBlock(chainState.finalizedBlockHeight)\n            setActiveValidators(chainState.validators.validators)\n        })\n    }\n\n    const handlePageChange = (params: PageChangeParams) => {\n        if (report.totalCount > 0) {\n            loadReport(params.page)\n        }\n    }\n\n    const loadReport = (page: number) => {\n        setCurrentPage(page)\n        setIsLoading(true)\n        const blockParam = filterTab === 1 && startBlock && endBlock ? `&start_block=${startBlock}&end_block=${endBlock}` : ''\n        const dateParam = filterTab === 0 && dateFrom && dateTo ? `&start_time=${moment(dateFrom, dateFormat).format(dateFormat)}&end_time=${moment(dateTo, dateFormat).format(dateFormat)}` : ''\n        const apiUrl = `${backendUrl}/validator-report?addr=${stash}&page=${page}${blockParam}${dateParam}`\n        axios.get(apiUrl).then((response) => {\n            if (response.data.report !== undefined) {\n                setReport(response.data);\n            }\n            setIsLoading(false)\n            setError(undefined)\n        }).catch((err) => {\n            setIsLoading(false)\n            setError(err)\n        })\n    }\n\n    const stopLoadingReport = () => {\n        setIsLoading(false)\n    }\n\n    const canLoadReport = () => stash && ((startBlock && endBlock) || (dateFrom && dateTo))\n    const startOrStopLoading = () => isLoading ? stopLoadingReport() : loadReport(1)\n    const updateStartBlock = (e: { target: { value: unknown; }; }) => setStartBlock((e.target.value as unknown as number));\n    const updateEndblock = (e: { target: { value: unknown; }; }) => setEndBlock((e.target.value as unknown as number));\n    const updateDateFrom = (e: { target: { value: unknown; }; }) => setDateFrom((e.target.value as unknown as string))\n    const updateDateTo = (e: { target: { value: unknown; }; }) => setDateTo((e.target.value as unknown as string));\n\n    const getButtonTitle = (isLoading: boolean) => {\n        if (isLoading) {\n            return (<div style={{ display: 'flex', alignItems: 'center' }}>Stop loading <CircularProgress style={ { color: '#fff', height: 20, width: 20, marginLeft: 12 } } /></div>)\n        }\n        if (filterTab === 1) {\n            return startBlock && endBlock ? `Load data between blocks ${startBlock} - ${endBlock}` : 'Load data between blocks'\n        }\n        if (filterTab === 0) {\n            return dateFrom && dateTo ? `Load data between dates ${dateFrom} - ${dateTo}` : 'Load data between dates'\n        }\n        return 'Choose dates or blocks range'\n    }\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <Container maxWidth=\"lg\">\n                <Grid container spacing={2}>\n                    <Grid item lg={12}>\n                        <div style={{ display: 'flex', justifyContent: 'flex-start' }}>\n                            <h1>Validator Report</h1>\n                            <Button style={{ display: 'none', fontSize: 12, alignSelf: 'center'}} onClick={() => setIsModalOpen(true)}><Edit style={{ fontSize: 12, alignSelf: 'center'}} /> Backend</Button>\n                        </div>\n                        <Dialog style={{ minWidth: 275 }} onClose={() => setIsModalOpen(false)} aria-labelledby=\"simple-dialog-title\" open={isModalOpen}>\n                            <DialogTitle id=\"simple-dialog-title\">Change Backend URL</DialogTitle>\n                            <FormControl style={ { margin: 12 }}>\n                                <Select\n                                    labelId=\"backend-url-label\"\n                                    id=\"backend-url\"\n                                    value={backendUrl}\n                                    onChange={(e) => setBackendUrl(e.target.value as unknown as string)}\n                                >\n                                <MenuItem value={'https://validators.joystreamstats.live'}>validators.joystreamstats.live</MenuItem>\n                                <MenuItem value={'https://joystream-api.herokuapp.com'}>joystream-api.herokuapp.com</MenuItem>\n                                <MenuItem value={'http://localhost:3500'}>localhost:3500</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Dialog>\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                        <Autocomplete\n                            freeSolo\n                            style={{ width: '100%' }}\n                            options={activeValidators}\n                            onChange={(e, value) => setStash(value || '')}\n                            value={stash}\n                            renderInput={(params) => <TextField {...params} label=\"Validator stash address\" variant=\"filled\" />} />\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                        <Tabs indicatorColor='primary' value={filterTab} onChange={(e: unknown, newValue: number) => setFilterTab(newValue)} aria-label=\"simple tabs example\">\n                            <Tab label=\"Search by date range\" />\n                            <Tab label=\"Search by blocks range\" />\n                        </Tabs>\n                    </Grid>\n                    <Grid hidden={filterTab !== 0} item xs={6} lg={3}>\n                        <TextField fullWidth type=\"date\" onChange={updateDateFrom} id=\"block-start\" InputLabelProps={{ shrink: true }} label=\"Date From\" value={dateFrom} variant=\"filled\" />\n                    </Grid>\n                    <Grid hidden={filterTab !== 0} item xs={6} lg={3}>\n                        <BootstrapButton size='large' style={{ height: 56 }} fullWidth onClick={() => setDateFrom(moment().subtract(2, 'w').format('yyyy-MM-DD'))}>2 weeks from today</BootstrapButton>\n                    </Grid>\n                    <Grid hidden={filterTab !== 0} item xs={6} lg={3}>\n                        <TextField fullWidth type=\"date\" onChange={updateDateTo} id=\"block-end\" InputLabelProps={{ shrink: true }} label=\"Date To\" value={dateTo} variant=\"filled\" />\n                    </Grid>\n                    <Grid hidden={filterTab !== 0} item xs={6} lg={3}>\n                        <BootstrapButton size='large' style={{ height: 56 }} fullWidth onClick={() => setDateTo(moment().format('yyyy-MM-DD'))}>Today</BootstrapButton>\n                    </Grid>\n                    <Grid hidden={filterTab !== 1} item xs={6} lg={3}>\n                        <TextField fullWidth type=\"number\" onChange={updateStartBlock} id=\"block-start\" label=\"Start Block\" value={startBlock} variant=\"filled\" />\n                    </Grid>\n                    <Grid hidden={filterTab !== 1} item xs={6} lg={3}>\n                        <BootstrapButton size='large' style={{ height: 56 }} fullWidth disabled={!lastBlock} onClick={() => setStartBlock(lastBlock - (600 * 24 * 14))}>{lastBlock ? `2 weeks before latest (${lastBlock - (600 * 24 * 14)})` : '2 weeks from latest'}</BootstrapButton>\n                    </Grid>\n                    <Grid hidden={filterTab !== 1} item xs={6} lg={3}>\n                        <TextField fullWidth type=\"number\" onChange={updateEndblock} id=\"block-end\" label=\"End Block\" value={endBlock} variant=\"filled\" />\n                    </Grid>\n                    <Grid hidden={filterTab !== 1} item xs={6} lg={3}>\n                        <BootstrapButton size='large' style={{ height: 56 }} fullWidth disabled={!lastBlock} onClick={() => setEndBlock(lastBlock)}>{lastBlock ? `Pick latest block (${lastBlock})` : 'Use latest block'}</BootstrapButton>\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                        <BootstrapButton size='large' style={{ minHeight: 56 }} fullWidth disabled={!canLoadReport()} onClick={startOrStopLoading}>{getButtonTitle(isLoading)}</BootstrapButton>\n                        <Alert style={ error !== undefined ? { marginTop: 12 } : { display: 'none'} } onClose={() => setError(undefined)} severity=\"error\">Error loading validator report, please try again.</Alert>\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                        <ValidatorReportCard stash={stash} report={report} />\n                    </Grid>\n                    <Grid item xs={12} lg={12}>\n                        <div style={{ height: 400 }}>\n                            <DataGrid \n                                rows={report.report} \n                                columns={columns as unknown as ColDef[]}\n                                rowCount={report.totalCount}\n                                paginationMode=\"server\"\n                                onPageChange={handlePageChange} \n                                pageSize={report.pageSize}\n                                rowsPerPageOptions={[]}\n                                disableSelectionOnClick\n                                page={currentPage}\n                                />\n                        </div>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nconst ValidatorReportCard = (props: { stash: string, report: Reports }) => {\n    const copyValidatorStatistics = () => navigator.clipboard.writeText(scoringPeriodText)\n    const [scoringPeriodText, setScoringPeriodText] = useState('')\n    const useStyles = makeStyles({\n        root: {\n            minWidth: '100%',\n            textAlign: 'left'\n        },\n        title: {\n            fontSize: 18,\n        },\n        pos: {\n            marginTop: 12,\n        },\n    });\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        updateScoringPeriodText()\n    });\n\n    const updateScoringPeriodText = () => {\n        if (props.report.report.length > 0) {\n            const scoringDateFormat = 'DD-MM-yyyy';\n            const report = `Validator Date: ${moment(props.report.startTime).format(scoringDateFormat)} - ${moment(props.report.endTime).format(scoringDateFormat)}\\nDescription: I was an active validator from era/block ${props.report.startEra}/${props.report.startBlock} to era/block ${props.report.endEra}/${props.report.endBlock}\\nwith stash account ${props.stash}. (I was active in all the eras in this range and found a total of ${props.report.totalBlocks} blocks)`\n            setScoringPeriodText(report)\n        } else {\n            setScoringPeriodText('')\n        }\n    }\n\n    if (props.report.report.length > 0) {\n        return (<Card className={classes.root}>\n            <CardContent>\n                <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\n                    Validator Report:\n                </Typography>\n                { scoringPeriodText.split('\\n').map((i, key) => <Typography key={key} className={classes.pos} color=\"textSecondary\">{i}</Typography>) }\n            </CardContent>\n            <CardActions>\n                <Button onClick={copyValidatorStatistics} size=\"small\">Copy to clipboard</Button>\n            </CardActions>\n        </Card>)\n    }\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                    No Data Available\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default ValidatorReport\n","export default __webpack_public_path__ + \"static/media/joystream.f5df567f.svg\";","import { Link as RouterLink, Route, Switch } from 'react-router-dom';\nimport { MemoryRouter as Router } from 'react-router';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport LiveStatsWS from './LiveStatsWS';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ValidatorReport from './ValidatorReport';\nimport { AppBar, Button, Toolbar } from \"@material-ui/core\";\nimport joystream from './joystream.svg';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <div style={{ flexGrow: 1 }}>\n        <AppBar position=\"static\" style={{ flexDirection: 'row', backgroundColor: '#4138ff' }}>\n          <Toolbar style={{ paddingLeft: '12px', backgroundColor: '#4138ff' }}>\n            <Button color=\"inherit\" component={RouterLink} to=\"/\">\n              <img style={{ width: 50, height: 50 }} src={joystream} className=\"App-logo\" alt=\"Joystream logo\" />\n            </Button>\n            <Button color=\"inherit\" component={RouterLink} to=\"/\">Validator Report</Button>\n            <Button color=\"inherit\" component={RouterLink} to=\"/live\">WS Live Stats</Button>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <div>\n        <Switch>\n          <Route path=\"/live\">\n            <LiveStatsWS />\n          </Route>\n          <Route path=\"/\">\n            <ValidatorReport />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}