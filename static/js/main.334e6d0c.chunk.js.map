{"version":3,"sources":["joystream.svg","debug.ts","joyApi.ts","utils.ts","get-status.ts","BootstrapButton.tsx","LinearProgressWithLabel.tsx","ValidatorsStats.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["moment","defaultFormat","config","JoyApi","endpoint","isReady","api","wsEndpoint","process","this","a","ApiPromise","provider","WsProvider","types","isReadyOrError","then","instance","blockHash","undefined","query","balances","totalIssuance","at","issuance","toNumber","Promise","all","rpc","system","chain","name","version","nodeName","nodeVersion","toString","getFinalizedHead","finalizedHash","getHeader","number","address","blockStart","stash","getBlockHash","startHash","staking","activeEra","startEra","unwrap","index","Date","timestamp","now","startTimestamp","toISOString","erasRewardPoints","eraPoints","data","individual","forEach","points","author","pn","Number","toBigInt","id","era","hash","block","date","searchPreviousBlocks","getBlock","currentBlockNr","header","currentHash","snapshotValidators","allValidators","isEmpty","validatorCount","max","activeValidators","Array","from","slice","session","validators","currentEra","isSome","erasTotalStake","BN","totalStake","count","length","toJSON","total_stake","PromiseAllObj","obj","Object","entries","map","key","val","res","reduce","acc","value","getChainState","init","finalizedBlockHeight","validatorsData","systemData","status","getValidatorStatistics","getActiveErasForBlock","BootstrapButton","withStyles","root","boxShadow","textTransform","fontSize","padding","border","lineHeight","color","backgroundColor","borderColor","fontFamily","join","Button","normalise","min","LinearProgressWithLabel","props","Grid","container","item","lg","style","width","Box","display","alignItems","mr","LinearProgress","variant","minWidth","whiteSpace","Typography","Math","round","useStyles","makeStyles","textAlign","title","pos","marginBottom","ValidatorsStats","classes","sortedByBlock","activeEras","firstBlock","lastBlock","scoringPeriodText","sort","e1","e2","toLocaleDateString","Card","className","CardContent","gutterBottom","CardActions","onClick","navigator","clipboard","writeText","size","JoystreamApp","useState","shouldStop","setShouldStop","setActiveEras","field","headerName","sortable","headerAlign","columns","setStash","startBlock","setStartBlock","endBlock","setEndBlock","isLoading","setIsLoading","setLastBlock","progress","setProgress","setActiveValidators","useEffect","updateChainState","interval","setInterval","clearInterval","chainState","fetchBlocksData","resetDataBeforeLoading","blockHeight","shouldStopLoading","prev","resetProgress","fetchBlockData","updateProgress","result","indexOf","prevEras","stopLoadingOnLastBlock","shouldDisableButton","endBlockLabel","Container","maxWidth","direction","justify","spacing","src","joystream","alt","Autocomplete","freeSolo","options","onChange","e","renderInput","params","TextField","label","type","target","marginRight","disabled","fullWidth","height","rows","pageSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.334e6d0c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/joystream.f5df567f.svg\";","import moment from 'moment';\n\nmoment.defaultFormat = 'YYYY-MM-DD HH:mm:ss';\n\nexport const log = (...values: any[]) => {\n    // console.log(`[${moment().format()}]:`, ...values);\n}\n\nexport const error = (...values: any[]) => {\n    console.error(`[${moment().format()}]:`, ...values);\n}","import { WsProvider, ApiPromise } from \"@polkadot/api\";\nimport { types } from \"@joystream/types\";\nimport { AccountId, Hash } from \"@polkadot/types/interfaces\";\nimport { config } from \"dotenv\";\nimport BN from \"bn.js\";\nimport { Option, Vec } from \"@polkadot/types\";\nimport { log } from \"./debug\"\nimport { ActiveEra } from \"./Types\";\n\nconfig();\n\nexport class JoyApi {\n  endpoint: string;\n  isReady: Promise<ApiPromise>;\n  api!: ApiPromise;\n\n  constructor(endpoint?: string) {\n    const wsEndpoint = endpoint || process.env.REACT_APP_WS_PROVIDER || \"ws://127.0.0.1:9944\";\n    this.endpoint = wsEndpoint;\n    this.isReady = (async () => {\n      const api = await new ApiPromise({ provider: new WsProvider(wsEndpoint), types })\n        .isReadyOrError;\n      return api;\n    })();\n  }\n  get init(): Promise<JoyApi> {\n    return this.isReady.then((instance) => {\n      this.api = instance;\n      return this;\n    });\n  }\n\n  async totalIssuance(blockHash?: Hash) {\n    const issuance =\n      blockHash === undefined\n        ? await this.api.query.balances.totalIssuance()\n        : await this.api.query.balances.totalIssuance.at(blockHash);\n\n    return issuance.toNumber();\n  }\n\n  async systemData() {\n    const [chain, nodeName, nodeVersion] = await Promise.all([\n      this.api.rpc.system.chain(),\n      this.api.rpc.system.name(),\n      this.api.rpc.system.version(),\n      // this.api.rpc.system.peers(),\n    ]);\n\n    return {\n      chain: chain.toString(),\n      nodeName: nodeName.toString(),\n      nodeVersion: nodeVersion.toString(),\n      // peerCount: peers.length,\n    };\n  }\n\n  async finalizedHash() {\n    return this.api.rpc.chain.getFinalizedHead();\n  }\n\n  async finalizedBlockHeight() {\n    const finalizedHash = await this.finalizedHash();\n    const { number } = await this.api.rpc.chain.getHeader(`${finalizedHash}`);\n    return number.toNumber();\n  }\n\n  async getActiveErasForBlock(address: string, blockStart: number): Promise<ActiveEra[] | undefined> {\n    const stash = address;\n    const startHash = (await this.api.rpc.chain.getBlockHash(blockStart));\n    const startEra = (await this.api.query.staking.activeEra.at(startHash)).unwrap().index.toNumber();\n    const startTimestamp = new Date((await this.api.query.timestamp.now.at(startHash)).toNumber()).toISOString();\n    const eraPoints = await this.api.query.staking.erasRewardPoints.at(startHash, startEra)\n    let data = undefined\n    eraPoints.individual.forEach((points, author) => {\n      log(`Author Points [${author}]`);\n      log(`Individual Points [${points}]`);\n      if (author.toString() === stash) {\n        const pn = Number(points.toBigInt())\n        const activeEra: ActiveEra = {\n          id: blockStart,\n          era: startEra,\n          hash: startHash.toString(),\n          block: blockStart,\n          date: startTimestamp,\n          points: pn\n        }\n        log(`Era [${activeEra.era}], Block [${activeEra.block}], Date [${activeEra.date}], Points [${activeEra.points}], Hash [${activeEra.hash}]`);\n        data = activeEra\n      }\n    });\n    return data\n  }\n\n  async findActiveValidators(hash: Hash, searchPreviousBlocks: boolean): Promise<AccountId[]> {\n    const block = await this.api.rpc.chain.getBlock(hash);\n\n    let currentBlockNr = block.block.header.number.toNumber();\n    let activeValidators;\n    do {\n      let currentHash = (await this.api.rpc.chain.getBlockHash(currentBlockNr)) as Hash;\n      let allValidators = await this.api.query.staking.snapshotValidators.at(currentHash) as Option<Vec<AccountId>>;\n      if (!allValidators.isEmpty) {\n        let max = (await this.api.query.staking.validatorCount.at(currentHash)).toNumber();\n        activeValidators = Array.from(allValidators.unwrap()).slice(0, max);\n      }\n\n      if (searchPreviousBlocks) {\n        --currentBlockNr;\n      } else {\n        ++currentBlockNr;\n      }\n\n    } while (activeValidators === undefined);\n    return activeValidators;\n  }\n\n  async validatorsData() {\n    const validators = await this.api.query.session.validators();\n    const era = await this.api.query.staking.currentEra();\n    const totalStake = era.isSome ?\n      await this.api.query.staking.erasTotalStake(era.unwrap())\n      : new BN(0);\n\n    return {\n      count: validators.length,\n      validators: validators.toJSON(),\n      total_stake: totalStake.toNumber(),\n    };\n  }\n}\n","const fromEntries = (xs: [string | number | symbol, any][]) =>\n  xs.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n\nexport function PromiseAllObj(obj: {\n  [k: string]: any;\n}): Promise<{ [k: string]: any }> {\n  return Promise.all(\n    Object.entries(obj).map(([key, val]) =>\n      val instanceof Promise\n        ? val.then((res) => [key, res])\n        : new Promise((res) => res([key, val]))\n    )\n  ).then((res: any[]) => fromEntries(res));\n}\n","import { log } from \"./debug\";\nimport { JoyApi } from \"./joyApi\";\nimport { EraStatus } from \"./Types\";\nimport { PromiseAllObj } from \"./utils\";\n\nconst api = new JoyApi();\n\nexport async function getChainState() {\n  await api.init;\n\n  const status = await PromiseAllObj({\n    totalIssuance: await api.totalIssuance(),\n    finalizedBlockHeight: await api.finalizedBlockHeight(),\n    validators: await api.validatorsData(),\n    system: await api.systemData(),\n  });\n\n  log(status)\n  return status;\n}\n\nexport async function getValidatorStatistics(address: string, blockStart: number): Promise<EraStatus> {\n  await api.init;\n  const status = await PromiseAllObj({\n    status: await api.getActiveErasForBlock(address, blockStart)\n  })\n  return status as unknown as EraStatus\n}\n","import { Button, withStyles } from '@material-ui/core';\n\nexport const BootstrapButton = withStyles({\n  root: {\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 16,\n    padding: '6px 12px',\n    border: '1px solid',\n    lineHeight: 1.5,\n    color: '#ffffff',\n    backgroundColor: '#4138ff',\n    borderColor: '#4138ff',\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:hover': {\n      backgroundColor: '#4138dd',\n      borderColor: '#4138dd',\n      boxShadow: 'none',\n    },\n    '&:active': {\n      boxShadow: 'none',\n      backgroundColor: '#4138ee',\n      borderColor: '#4138ee',\n    },\n    '&:focus': {\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n    },\n  },\n})(Button);\n","import { Box, Grid, LinearProgress, LinearProgressProps, Typography } from '@material-ui/core';\n\nexport function normalise(value: number, min: number, max: number) {\n  return (Number(value) - Number(min)) * 100 / (Number(max) - Number(min));\n}\n\nexport function LinearProgressWithLabel(props: LinearProgressProps & { value: number; min: number; max: number; }) {\n  return props.value > 0 ? (\n    <Grid container item lg={12}>\n      <div style={{ width: '98%' }}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Box width=\"100%\" mr={1}>\n            <LinearProgress variant=\"determinate\" value={normalise(props.value, props.min, props.max)} />\n          </Box>\n          <Box minWidth={35} style={{ whiteSpace: \"nowrap\" }}>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {`${Math.round(normalise(props.value, props.min, props.max))}% (${props.value}/${props.max})`}\n            </Typography>\n          </Box>\n        </Box>\n      </div>\n    </Grid>\n  ) : null;\n}\n","import { Button, Card, CardActions, CardContent, Grid, makeStyles, Typography } from '@material-ui/core';\nimport { ActiveEra } from './Types';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '98%',\n    textAlign: 'left'\n  },\n  title: {\n    fontSize: 18,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport const ValidatorsStats = (props: { stash: String, activeEras: ActiveEra[]; }) => {\n  const classes = useStyles();\n  let sortedByBlock = props.activeEras\n  let noDataLabel = 'No Data Available'\n  let firstBlock: ActiveEra | undefined = undefined\n  let lastBlock: ActiveEra | undefined = undefined\n  let scoringPeriodText = ''\n\n  const copyValidatorStatistics = () => navigator.clipboard.writeText(scoringPeriodText)\n\n  if(props.activeEras.length > 0) {\n    sortedByBlock = props.activeEras.sort((e1,e2) => e1.block - e2.block)\n    firstBlock = sortedByBlock[0];\n    lastBlock = sortedByBlock[sortedByBlock.length - 1];\n    scoringPeriodText = `\n    Validator Date: ${new Date(firstBlock!.date).toLocaleDateString()}-${new Date(lastBlock!.date).toLocaleDateString()}\n    Description: I was an active validator from era/block ${firstBlock!.era}/${firstBlock!.block} to era/block ${lastBlock!.era}/${lastBlock!.block} with stash account ${props.stash}\n    `\n    return (\n      <Grid container item lg={12}>\n        <Card className={classes.root}>\n          <CardContent>\n            <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\n              Scoring period text:\n            </Typography>\n            <Typography className={classes.pos} color=\"textSecondary\">\n              { scoringPeriodText }\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button onClick={copyValidatorStatistics} size=\"small\">Copy to clipboard</Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    );\n  } else {\n    return (\n      <Card className={classes.root}>\n        <CardContent>\n        <Typography className={classes.pos} color=\"textSecondary\">\n            { noDataLabel }\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n};\n","import joystream from './joystream.svg';\nimport './App.css';\nimport { getValidatorStatistics, getChainState } from './get-status';\nimport { Container, Grid, TextField } from '@material-ui/core';\nimport { ColDef, DataGrid } from '@material-ui/data-grid';\nimport { BootstrapButton } from './BootstrapButton';\nimport { LinearProgressWithLabel } from './LinearProgressWithLabel';\nimport { ActiveEra } from './Types';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useEffect, useState } from 'react';\nimport { ValidatorsStats } from './ValidatorsStats';\n\nconst JoystreamApp = () => {\n  const [shouldStop, setShouldStop] = useState(false);\n  const [activeEras, setActiveEras] = useState([] as ActiveEra[]);\n  const [columns] = useState(\n    [\n      { field: 'era', headerName: 'Era', width: 100, sortable: true, headerAlign: 'center' },\n      { field: 'block', headerName: 'Block', width: 100, sortable: true, headerAlign: 'center' },\n      { field: 'date', headerName: 'Date', width: 200, sortable: true, headerAlign: 'center' },\n      { field: 'points', headerName: 'Points', width: 100, sortable: true, headerAlign: 'center' },\n      { field: 'hash', headerName: 'Block Hash', width: 500, sortable: false, headerAlign: 'center' },\n    ]\n  );\n  const [stash, setStash] = useState('5EhDdcWm4TdqKp1ew1PqtSpoAELmjbZZLm5E34aFoVYkXdRW');\n  const [startBlock, setStartBlock] = useState(1274283);\n  const [endBlock, setEndBlock] = useState(1274383);\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastBlock, setLastBlock] = useState(0);\n  const [progress, setProgress] = useState({\n    value: 0,\n    min: 0,\n    max: 0\n  });\n  const [activeValidators, setActiveValidators] = useState([]);\n\n  useEffect(() => {\n    updateChainState()\n    const interval = setInterval(() => { updateChainState() }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateChainState = async () => {\n    const chainState = await getChainState();\n    setLastBlock(chainState.finalizedBlockHeight)\n    setActiveValidators(chainState.validators.validators)\n  }\n\n  const fetchBlocksData = async () => {\n    resetDataBeforeLoading();\n    if (startBlock < endBlock) {\n      for (let blockHeight = Number(startBlock); blockHeight <= Number(endBlock); blockHeight += 1) {\n        let shouldStopLoading = false\n        setShouldStop(prev => {\n          shouldStopLoading = prev\n          return prev\n        })\n        if (shouldStopLoading) {\n          resetProgress();\n          break;\n        }\n        await fetchBlockData(Number(blockHeight));\n      }\n    } else {\n      for (let blockHeight = Number(startBlock); blockHeight >= Number(endBlock); blockHeight -= 1) {\n        let shouldStopLoading = false\n        setShouldStop(prev => {\n          shouldStopLoading = prev\n          return prev\n        })\n        if (shouldStopLoading) {\n          resetProgress();\n          break;\n        }\n        await fetchBlockData(Number(blockHeight));\n      }\n    }\n  }\n\n  const stopFetchingBlocksData = () => {\n    if (!shouldStop) {\n      setShouldStop(true)\n      setIsLoading(false)\n    }\n  }\n\n  const resetProgress = () => {\n    setShouldStop(false)\n    setProgress({ value: 0, min: 0, max: 0 })\n  }\n\n  const fetchBlockData = async (blockHeight: number) => {\n    updateProgress(blockHeight, );\n    let result = await getValidatorStatistics(stash, blockHeight);\n    if (result && result.status && activeEras.indexOf(result.status) < 0) {\n      setActiveEras((prevEras) => [...prevEras, result.status])\n    }\n    stopLoadingOnLastBlock(blockHeight);\n  }\n\n  const stopLoadingOnLastBlock = (blockHeight: number) => {\n    if (blockHeight.toString() === endBlock.toString()) {\n      setIsLoading(false)\n    }\n  }\n\n  const updateProgress = (blockHeight: number) => {\n    setProgress({ value: blockHeight, min: startBlock, max: endBlock })\n  }\n\n  const resetDataBeforeLoading = () => {\n    setIsLoading(true)\n    setActiveEras([])\n  }\n\n  const shouldDisableButton = !stash || !startBlock || !endBlock;\n  const endBlockLabel = lastBlock > 0 ? `End Block (Last block: ${lastBlock})` : 'End Block';\n\n  const updateStartBlock = (e: { target: { value: unknown; }; }) => setStartBlock((e.target.value as unknown as number));\n  const updateEndblock = (e: { target: { value: unknown; }; }) => setEndBlock((e.target.value as unknown as number));\n  const startOrStopLoading = () => isLoading ? stopFetchingBlocksData() : fetchBlocksData();\n  return (\n    <div className=\"App\" >\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={3}\n        >\n          <Grid container item lg={12}></Grid>\n          <img src={joystream} className=\"App-logo\" alt=\"Joystream logo\" />\n          <Grid container item lg={12}>\n            <Autocomplete\n              freeSolo\n              style={{ width: '100%' }}\n              options={activeValidators}\n              onChange={(e, value) => setStash(value || '')}\n              value={stash}\n              renderInput={(params) => <TextField {...params} label=\"Validator stash address\" variant=\"filled\" />} />\n          </Grid>\n          <Grid container item lg={12}>\n            <TextField type=\"number\" onChange={updateStartBlock} style={{ width: '49%', marginRight: '24px' }} id=\"block-start\" label=\"Start Block\" value={startBlock} variant=\"filled\" />\n            <TextField type=\"number\" onChange={updateEndblock} style={{ width: '49%' }} id=\"block-end\" label={endBlockLabel} value={endBlock} variant=\"filled\" />\n          </Grid>\n          <ValidatorsStats stash={stash} activeEras={activeEras} />\n          <Grid container item lg={12}>\n            <BootstrapButton disabled={shouldDisableButton} fullWidth onClick={startOrStopLoading} color=\"primary\">{isLoading ? 'Stop loading' : 'Load data'}</BootstrapButton>\n          </Grid>\n          <LinearProgressWithLabel {...progress} />\n          <div style={{ height: 600, width: '98%' }}>\n            <DataGrid rows={activeEras} columns={columns as unknown as ColDef[]} pageSize={50} />\n          </div>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default JoystreamApp","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport JoystreamApp from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <JoystreamApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}